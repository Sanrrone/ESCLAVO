import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="darkgrid")
reticulate::repl_python()
shiny::runApp('Programas/ESCLAVO')
runApp('Programas/ESCLAVO')
print(get_cpu()$model_name)
library(doParallel)
## Return the machine CPU
cat("Machine:     "); print(get_cpu()$model_name)
install.packages("benchmarkme")
library(benchmarkme)
## Return the machine CPU
cat("Machine:     "); print(get_cpu()$model_name)
## Return number of true cores
cat("Num cores:   "); print(detectCores(logical = FALSE))
## Return number of threads
cat("Num threads: "); print(detectCores(logical = TRUE))
## Return the machine RAM
cat("RAM:         "); print (get_ram()); cat("\n")
get_cpu()
benchmarkme
cpu
strsplit(system("ps -C rsession -o %cpu,%mem,pid,cmd", intern = TRUE), " ")
detectCores()
get.cpu.usage = function() {
sys.usage = system ("vmstat -n 2 5", intern=T)  # a unix command: get 3 snapshots of 1 sec intervals
sys.usage = gsub ( "^[[:space:]]", "", sys.usage ) # remove starting blanks
cpu.usage = as.numeric( unlist(strsplit(sys.usage[5], "[[:space:]]+")) ) # get the next-to-last data
cpu.user  = cpu.usage[13]
cpu.system = cpu.usage[14]
cpu.idle =  cpu.usage[15]
cpu.total =  cpu.user +  cpu.system
res = list(vmstat = sys.usage, cpu.user=cpu.user, cpu.system=cpu.system, cpu.idle=cpu.idle, cpu.total=cpu.total)
return(res)
}
get.cpu.usage()
digest(file$path,algo="md5",file=TRUE)
digest
install.packages("digest")
digest(file$path,algo="md5",file=TRUE)
digest("/proc/stat",algo="md5",file=TRUE)
library(digest)
digest("/proc/stat",algo="md5",file=TRUE)
digest("/home/sandro/Escritorio/cotizacionesBiocomputing.xlsx",algo="md5",file=TRUE)
digest("/home/sandro/test.txt",algo="md5",file=TRUE)
library(dada2)
BiocManager::install("DECIPHER")
setwd("~/Programas/ESCLAVO")
shiny::runApp()
runApp()
