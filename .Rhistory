import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="darkgrid")
reticulate::repl_python()
shiny::runApp('Programas/ESCLAVO')
runApp('Programas/ESCLAVO')
print(get_cpu()$model_name)
library(doParallel)
## Return the machine CPU
cat("Machine:     "); print(get_cpu()$model_name)
install.packages("benchmarkme")
library(benchmarkme)
## Return the machine CPU
cat("Machine:     "); print(get_cpu()$model_name)
## Return number of true cores
cat("Num cores:   "); print(detectCores(logical = FALSE))
## Return number of threads
cat("Num threads: "); print(detectCores(logical = TRUE))
## Return the machine RAM
cat("RAM:         "); print (get_ram()); cat("\n")
get_cpu()
benchmarkme
cpu
strsplit(system("ps -C rsession -o %cpu,%mem,pid,cmd", intern = TRUE), " ")
detectCores()
get.cpu.usage = function() {
sys.usage = system ("vmstat -n 2 5", intern=T)  # a unix command: get 3 snapshots of 1 sec intervals
sys.usage = gsub ( "^[[:space:]]", "", sys.usage ) # remove starting blanks
cpu.usage = as.numeric( unlist(strsplit(sys.usage[5], "[[:space:]]+")) ) # get the next-to-last data
cpu.user  = cpu.usage[13]
cpu.system = cpu.usage[14]
cpu.idle =  cpu.usage[15]
cpu.total =  cpu.user +  cpu.system
res = list(vmstat = sys.usage, cpu.user=cpu.user, cpu.system=cpu.system, cpu.idle=cpu.idle, cpu.total=cpu.total)
return(res)
}
get.cpu.usage()
digest(file$path,algo="md5",file=TRUE)
digest
install.packages("digest")
digest(file$path,algo="md5",file=TRUE)
digest("/proc/stat",algo="md5",file=TRUE)
library(digest)
digest("/proc/stat",algo="md5",file=TRUE)
digest("/home/sandro/Escritorio/cotizacionesBiocomputing.xlsx",algo="md5",file=TRUE)
digest("/home/sandro/test.txt",algo="md5",file=TRUE)
library(dada2)
BiocManager::install("DECIPHER")
rm(list = ls())
library(shiny)
library(shinyDirectoryInput) #devtools::install_github('wleepang/shiny-directory-input')
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)
#library(dashboardthemes) #install_github("nik01010/dashboardthemes")
library(base64enc)
library(filesstrings)
library(DT)
library(digest)
library(dplyr)
library(ggplot2)
runApp('Programas/ESCLAVO')
pconf
runApp('Programas/ESCLAVO')
Sys.info()
library(rmarkdown)
library(rmdformats)
library(DT)
library(dplyr)
library(ggplot2)
library(plotly)
library(rmarkdown)
library(rmdformats)
library(DT)
library(dplyr)
library(ggplot2)
library(plotly)
reportParams<-list()
##############################0-raw
reportParams[["nfastq"]]<-length(list.files("*.fastq.gz",path = "0-raw"))/2
reportParams[["nfastq"]]
list.files("*.fastq.gz",path = "0-raw")
setwd("~/Programas/ESCLAVO/projects")
##############################0-raw
reportParams[["nfastq"]]<-length(list.files("*.fastq.gz",path = "0-raw"))/2
reportParams[["nfastq"]]
reportParams[["allfiles"]]<-list.files("0-raw",recursive =T)
reportParams[["proyectname"]]<-"projects"
##############################1-qc
reportParams[["qcreport"]]<-"1-qc/multiqc_report.html"
reportParams[["outtype"]]<-"pdf"
render(input = "reportGen.Rmd", params = reportParams, output_format = "pdf_document")
render(input = "reportGen.Rmd", params = reportParams)
length(list.files("*.fastq.gz",path = "FASTQFOLDER"))/2
list.files("*.fastq.gz",path = "0-raw")
GETWD()
getwd()
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T) %>% grepl("report")
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T) %>% mutate()
library(stringr)
str_remove(list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T),pattern = "report")
str_remove(list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T),pattern = "reportGen.*")
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)[-4]
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)[+4]
head(list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T),-4)
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)[+4]
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)
allfiles<-list.files("PFOLDER",recursive =T)
allfiles
list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)
allfiles<-list.files("/home/sandro/Programas/ESCLAVO/projects",recursive =T)
which(allfiles != "report")
subset(allfiles, allfiles %in% "report")
grepl(allfiles,"report.")
sapply(grepl(allfiles,"report."))
sapply(allfiles,function(x)grepl(x,"report."))
sapply(allfiles,function(x)grepl(x,"report"))
sapply(allfiles,function(x)grepl("report.",x))
sapply(allfiles,function(x)grepl("report.R[md]",x))
sapply(allfiles,function(x)grepl("report.R",x))
sapply(allfiles,function(x)grepl("report.",x))
sapply(allfiles,function(x)grep("report.",x))
sapply(allfiles,function(x)grepl("report.",x))
lapply(allfiles,function(x)grepl("report.",x))
unlist(lapply(allfiles,function(x)grepl("report.",x)))
sapply(allfiles,function(x)grepl("report.",x))
unlist(sapply(allfiles,function(x)grepl("^report.",x)))
unlist(lapply(allfiles,function(x)grepl("^report.",x)))
unlist(lapply(allfiles,function(x)!grepl("^report.",x)))
allfiles[unlist(lapply(allfiles,function(x)!grepl("^report.",x)))]
install.packages("data.tree")
allfiles
qctable<-read.table("1-qc/qc_summary.tsv",sep = "\t", header = T)
qctable$Sample<-rownames(qctable)
qctable
rownames(qctable)<-1:nrow(qctable)
qctable
c(nrow(qctable),1:(nrow(qctable)-1))
qctable<-qctable[,c(ncol(qctable),1:(ncol(qctable)-1))]
qctable
coverp
if(params$outtype=="pdf"){
coverp<-"\centering
coverp
coverp<-"\centering
coverp<-"'\centering
coverp<-"\\centering
\begin{titlepage}
\begin{center}
\vspace*{0.5cm}
\textsc{\LARGE Universidad Mayor}\\[0.8cm] % Name of your university/college
\textsc{\large Campus Huechuraba}\\[1.5cm] % Major heading such as course name
{ \huge \bfseries Manual de uso: Cluster Darwin}\\[2cm] % Title of your document
\begin{minipage}{0.6\textwidth}
\begin{center} \large
\emph{Autor:} Sandro Valenzuela % Your name
read.table("2-taxInsight/abundance.tsv",sep = "\t",header = T)
"2-taxInsight/abundance.tsv"
SummaryAbu<-read.table("2-taxInsight/abundance.tsv",sep = "\t",header = T)
SummaryAbu
sum(SummaryAbu)
sum(SummaryAbu$ERR3357130)
sort(SummaryAbu)
sort(SummaryAbu$ERR3357130)
sort(SummaryAbu$ERR3357130,decreasing = T)
max(SummaryAbu)
-1:-8
colnames(SummaryAbu)[-1:-8]
colnames(SummaryAbu)[-1:-7]
col<-"ERR3357130"
sort(SummaryAbu[,col],decreasing = T)
sort(SummaryAbu[,col],decreasing = T)[1:10]
top10<-SummaryAbu[sort(SummaryAbu[,col],decreasing = T)[1:10],]
top10
sort(SummaryAbu[,col],decreasing = T)
order(SummaryAbu[,col],decreasing = T)
order(SummaryAbu[,col],decreasing = T)[1:10]
top10<-SummaryAbu[order(SummaryAbu[,col],decreasing = T)[1:10],]
top10
tmp<-merge(tmp,top10,all=T)
tmp<-data.frame()
tmp<-merge(tmp,top10,all=T)
tmp
top10
tmp<-merge(tmp,top10,all=T)
tmp
tmp<-data.frame()
for(col in colnames(SummaryAbu)[-1:-7]){
top10<-SummaryAbu[order(SummaryAbu[,col],decreasing = T)[1:10],]
tmp<-merge(tmp,top10,all=T)
}
tmp
SummaryAbu<-colnames(tmp)[-1:-5]
SummaryAbu
colnames(tmp)[-1:-5]
############################## 2-taxInsight
SummaryAbu<-read.table("ABUNDANCEFILE",sep = "\t",header = T)
tmp<-data.frame()
for(col in colnames(SummaryAbu)[-1:-7]){
top10<-SummaryAbu[order(SummaryAbu[,col],decreasing = T)[1:10],]
tmp<-merge(tmp,top10,all=T)
}
SummaryAbu<-read.table("2-taxInsight/abundance.tsv",sep = "\t",header = T)
tmp<-data.frame()
for(col in colnames(SummaryAbu)[-1:-7]){
top10<-SummaryAbu[order(SummaryAbu[,col],decreasing = T)[1:10],]
tmp<-merge(tmp,top10,all=T)
}
SummaryAbu<-SummaryAbu[,colnames(tmp)[-1:-5]]
SummaryAbu
SummaryAbu<-tmp[,colnames(tmp)[-1:-5]]
SummaryAbu
melted<-melt(SummaryAbu)
library(reshape2)
melted<-melt(SummaryAbu)
melted
melted<-melt(SummaryAbu)
melted
ggplot(SummaryAbu,aes(variable,value)) + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
ggplot(melted,aes(variable,value)) + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
ggplot(melted,aes(variable,value, color=Genus)) + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
ggplot(melted,aes(variable,value, color=Genus)) + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
ggplot(melted,aes(variable,value, colour=Genus)) + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
ggplot(melted,aes(variable,value, fill=Genus)) + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
SummaryAbu<-SummaryAbu[!is.na(SummaryAbu)]
SummaryAbu
SummaryAbu<-read.table("2-taxInsight/abundance.tsv",sep = "\t",header = T)
tmp<-data.frame()
for(col in colnames(SummaryAbu)[-1:-7]){
top10<-SummaryAbu[order(SummaryAbu[,col],decreasing = T)[1:10],]
tmp<-merge(tmp,top10,all=T)
}
SummaryAbu<-tmp[,colnames(tmp)[-1:-4]]
SummaryAbu[is.na(SummaryAbu)]
is.na(SummaryAbu)
class(SummaryAbu)
SummaryAbu[is.na(SummaryAbu),]
SummaryAbu[is.na(SummaryAbu)]
SummaryAbu[!is.na(SummaryAbu)]
SummaryAbu[is.na(SummaryAbu)]
as.data.frame.table(SummaryAbu)
SummaryAbu[is.na(SummaryAbu),]
SummaryAbu[is.na(SummaryAbu)]
lapply(colnames(SummaryAbu),funtion(x){tmp<-SummaryAbu[,x];tmp[is.na(tmp)]<-"Unclassified"})
lapply(colnames(SummaryAbu),funtion(x){tmp<-SummaryAbu[,x];tmp[is.na(tmp)]<-"Unclassified"},tmp)
lapply(colnames(SummaryAbu),funtion(x){tmp<-SummaryAbu[,x];tmp[is.na(tmp)]<-"Unclassified";tmp})
lapply(colnames(SummaryAbu),function(x){tmp<-SummaryAbu[,x];tmp[is.na(tmp)]<-"Unclassified";tmp})
SummaryAbu<-read.table("2-taxInsight/abundance.tsv",sep = "\t",header = T,stringsAsFactors = F)
SummaryAbu[is.na(SummaryAbu)]
SummaryAbu[is.na(SummaryAbu)]<-"Unclassified"
SummaryAbu
file.exists()
load('1-qc/seqtab.nochim.RData')
dna <- DNAStringSet(getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
library(dada2)
library(phyloseq)
library(Biostrings)
library(ggplot2)
load('1-qc/seqtab.nochim.RData')
dna <- DNAStringSet(getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
print('Doing assigment')
taxa <- assignTaxonomy(seqtab.nochim, '../pipelines/16s18sits/DB/silva_nr_v132_train_set.fa.gz', multithread=TRUE, verbose = T)
taxa <- addSpecies(taxa, '../pipelines/16s18sits/DB/silva_species_assignment_v132.fa.gz')
print('Done')
abudancedf<-as.data.frame(t(seqtab.nochim))
abudancedf<-cbind(taxa,abudancedf[rownames(taxa),])
rownames(abudancedf)<-1:nrow(abudancedf)
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), tax_table(taxa))
hformula=10
top10 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.top10 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top10 <- prune_taxa(top10, ps.top10)
top10
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), tax_table(taxa))
top10 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.top10 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top10 <- prune_taxa(top10, ps.top10)
ps.top10
if(file.exists('../0-raw/metadata.tsv'){
if(file.exists('../0-raw/metadata.tsv')){
metadata<-read.table('../0-raw/metadata.tsv', sep='\t', header=T, stringsAsFactors = F)
}else{
metadata<-data.frame()
}
metadata
if(nrow(metadata)!=0){
wformula=4 + length(sample_names(ps))*2.5 + length(unique(metadata$conditions))
pdf('sampleTaxComposition.pdf', width=wformula, height=hformula)
plot_bar(ps.top10, x='Sample', fill='Genus') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
plot_bar(ps.top10, x='Sample', fill='Family') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
}else{
wformula=4 + length(sample_names(ps))*2.5
#pdf('sampleTaxComposition.pdf', width=wformula, height=hformula)
plot_bar(ps.top10, x='Sample', fill='Genus') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
plot_bar(ps.top10, x='Sample', fill='Family') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
}
#pdf('sampleTaxComposition.pdf', width=wformula, height=hformula)
plot_bar(ps.top10, x='Sample', fill='Genus') + geom_bar(position='fill', stat='identity', color='white') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
#pdf('sampleTaxComposition.pdf', width=wformula, height=hformula)
plot_bar(ps.top10, x='Sample', fill='Genus') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
ps.top10
metadata<-read.table("../0-raw/metadata.tsv",sep = "\t",stringsAsFactors = F,header = T)
metadata
wformula=4 + length(sample_names(ps))*2.5 + length(unique(metadata$treatment))
wformula
plot_bar(ps.top10, x='Sample', fill='Genus') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1))
sample_data(ps.top10)
sample_data(metadata)
sample_data(ps.top10)<-sample_data(metadata)
rownames(metadata)<-metadata$sample
sample_data(ps.top10)<-sample_data(metadata)
ps.top10
sample_data(ps.top10)
wformula=4 + length(sample_names(ps))*2.5 + length(unique(metadata$treatment))
plot_bar(ps.top10, x='Sample', fill='Genus') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1)) + facet_wrap(.~treatment)
plot_bar(ps.top10, x='Sample', fill='Genus') + geom_bar(position='fill', stat='identity', color='black') +
theme_minimal() + theme(axis.text.x = element_text(angle = 65, hjust = 1)) + facet_wrap(.~treatment,scales = "free_x")
ordu = ordinate(ps, "PCoA", "unifrac", weighted=TRUE)
ordu = ordinate(ps, "PCoA", weighted=TRUE)
plot_ordination(ps, ordu, color="Genus")
plot_ordination(ps, ordu, color="treatment")
sample_data(ps)<-sample_data(metadata)
plot_ordination(ps, ordu, color="treatment")
plot_ordination(ps, ordu, color="treatment") + theme_minimal()
plot_ordination(ps, ordu, color="treatment")
plot_ordination(ps, ordu, color="treatment", size=2)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=2)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=4)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=3)
ordu = ordinate(ps, "PCoA", weighted=FALSE)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=3)
plot_ordination(PS, GP.ord, type="taxa", color="Phylum", title="taxa")
plot_ordination(ps, GP.ord, type="taxa", color="Phylum", title="taxa")
GP.ord <- ordinate(ps, "NMDS", "bray")
plot_ordination(ps, GP.ord, type="taxa", color="Phylum", title="taxa")
ordu = ordinate(ps, "PCoA", weighted=TRUE)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=3)
ordu = ordinate(ps, "rda", weighted=TRUE)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=3)
ordu = ordinate(ps, "RDA", weighted=TRUE)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=3)
ordu = ordinate(ps, "PCoA", weighted=TRUE)
plot_ordination(ps, ordu, color="treatment") + geom_point(size=3)
dev.off()
shiny::runApp('~/Programas/ESCLAVO')
metadata<-read.table('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv', sep='\t', header=T, stringsAsFactors = F)
metadata
rownames(metadata)<-metadata
metadata
rownames(metadata)
rownames(metadata)<-metadata$sample
runApp('~/Programas/ESCLAVO')
metadata<-read.table('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv', sep='\t', header=T, stringsAsFactors = F)
rownames(metadata)<-metadata$sample
metadata
if(file.exists('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv')){
metadata<-read.table('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv', sep='\t', header=T, stringsAsFactors = F)
rownames(metadata)<-metadata$sample
sample_data(ps)<-sample_data(metadata)
ordu = ordinate(ps, 'PCoA', weighted=TRUE)
pdf('pcoa.pdf', width=10, height=10)
plot_ordination(ps, ordu, color='treatment') + geom_point(size=3)
dev.off()
}else{
metadata<-data.frame()
}
load('/home/sandro/Programas/ESCLAVO/projects/1-qc/seqtab.nochim.RData')
dna <- DNAStringSet(getSequences(seqtab.nochim)) # Create a DNAStringSet from the ASVs
print('Doing assigment')
taxa <- assignTaxonomy(seqtab.nochim, '/home/sandro/Programas/ESCLAVO/pipelines/16s18sits/DB/silva_nr_v132_train_set.fa.gz', multithread=TRUE, verbose = T)
taxa <- addSpecies(taxa, '/home/sandro/Programas/ESCLAVO/pipelines/16s18sits/DB/silva_species_assignment_v132.fa.gz')
print('Done')
abudancedf<-as.data.frame(t(seqtab.nochim))
abudancedf<-cbind(taxa,abudancedf[rownames(taxa),])
rownames(abudancedf)<-1:nrow(abudancedf)
ps <- phyloseq(otu_table(seqtab.nochim, taxa_are_rows=FALSE), tax_table(taxa))
ps
file.exists('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv')
metadata<-read.table('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv', sep='\t', header=T, stringsAsFactors = F)
rownames(metadata)<-metadata$sample
sample_data(ps)<-sample_data(metadata)
ordu = ordinate(ps, 'PCoA', weighted=TRUE)
plot_ordination(ps, ordu, color='treatment') + geom_point(size=3)
pdf('pcoa.pdf', width=10, height=10)
plot_ordination(ps, ordu, color='treatment') + geom_point(size=3)
dev.off()
getwd()
dev.off()
ordu = ordinate(ps, 'PCoA', weighted=TRUE)
pdf('pcoa.pdf', width=10, height=10)
plot_ordination(ps, ordu, color='treatment') + geom_point(size=3)
dev.off()
runApp('~/Programas/ESCLAVO')
ordu = ordinate(ps, 'PCoA', weighted=TRUE)
ordu
metadata<-read.table('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv', sep='\t', header=T, stringsAsFactors = F)
rownames(metadata)<-metadata$sample
sample_data(ps)<-sample_data(metadata)
ps
ordu = ordinate(ps, 'PCoA', weighted=TRUE)
plot_ordination(ps, ordu, color='treatment') + geom_point(size=3)
dev.off()
runApp('~/Programas/ESCLAVO')
setwd("~/Programas/ESCLAVO")
runApp()
shiny::runApp()
library(plotly)
runApp()
ffolder
runApp()
top10 <- names(sort(taxa_sums(ps), decreasing=TRUE))[1:10]
ps.top10 <- transform_sample_counts(ps, function(OTU) OTU/sum(OTU))
ps.top10 <- prune_taxa(top10, ps.top10)
plot_ordination(ps, ordu, color='treatment') + geom_point(size=3)
png('pcoa.png', width = 800,height = 600, units = 'px')
plot_ordination(ps, ordu, color='treatment') + geom_point(size=3)
getwd()
dev.off
dev.off()
file.exists('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv')
metadata<-read.table('/home/sandro/Programas/ESCLAVO/projects/0-raw/metadata.tsv', sep='\t', header=T, stringsAsFactors = F)
rownames(metadata)<-metadata$sample
sample_data(ps)<-sample_data(metadata)
ordu = ordinate(ps, 'PCoA', weighted=TRUE)
png('pcoa.png', width = 800,height = 600, units = 'px')
plot_ordination(ps, ordu, color='treatment') + geom_point(size=4)
dev.off()
png
library(grDevices)
last_plot()
runApp()
projectConf()["pfolder",]
runApp()
addResourcePath
runApp()
install.packages("widgetframe")
runApp()
setNewStepFolder
runApp()
list.files(".")
list.files(".",all.files = F)
list.files(".",all.files = F,full.names = T)
list.files(".",all.files = F,full.names = T,recursive = F)
list.files(".",all.files = F,recursive = F)
list.files("../",all.files = F,recursive = F)
runApp()
mcparallel
runApp()
