import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="darkgrid")
reticulate::repl_python()
shiny::runApp('Programas/ESCLAVO')
runApp('Programas/ESCLAVO')
print(get_cpu()$model_name)
library(doParallel)
## Return the machine CPU
cat("Machine:     "); print(get_cpu()$model_name)
install.packages("benchmarkme")
library(benchmarkme)
## Return the machine CPU
cat("Machine:     "); print(get_cpu()$model_name)
## Return number of true cores
cat("Num cores:   "); print(detectCores(logical = FALSE))
## Return number of threads
cat("Num threads: "); print(detectCores(logical = TRUE))
## Return the machine RAM
cat("RAM:         "); print (get_ram()); cat("\n")
get_cpu()
benchmarkme
cpu
strsplit(system("ps -C rsession -o %cpu,%mem,pid,cmd", intern = TRUE), " ")
detectCores()
get.cpu.usage = function() {
sys.usage = system ("vmstat -n 2 5", intern=T)  # a unix command: get 3 snapshots of 1 sec intervals
sys.usage = gsub ( "^[[:space:]]", "", sys.usage ) # remove starting blanks
cpu.usage = as.numeric( unlist(strsplit(sys.usage[5], "[[:space:]]+")) ) # get the next-to-last data
cpu.user  = cpu.usage[13]
cpu.system = cpu.usage[14]
cpu.idle =  cpu.usage[15]
cpu.total =  cpu.user +  cpu.system
res = list(vmstat = sys.usage, cpu.user=cpu.user, cpu.system=cpu.system, cpu.idle=cpu.idle, cpu.total=cpu.total)
return(res)
}
get.cpu.usage()
digest(file$path,algo="md5",file=TRUE)
digest
install.packages("digest")
digest(file$path,algo="md5",file=TRUE)
digest("/proc/stat",algo="md5",file=TRUE)
library(digest)
digest("/proc/stat",algo="md5",file=TRUE)
digest("/home/sandro/Escritorio/cotizacionesBiocomputing.xlsx",algo="md5",file=TRUE)
digest("/home/sandro/test.txt",algo="md5",file=TRUE)
library(dada2)
BiocManager::install("DECIPHER")
rm(list = ls())
library(shiny)
library(shinyDirectoryInput) #devtools::install_github('wleepang/shiny-directory-input')
library(shinyWidgets)
library(shinydashboard)
library(shinydashboardPlus)
#library(dashboardthemes) #install_github("nik01010/dashboardthemes")
library(base64enc)
library(filesstrings)
library(DT)
library(digest)
library(dplyr)
library(ggplot2)
runApp('Programas/ESCLAVO')
pconf
runApp('Programas/ESCLAVO')
Sys.info()
shiny::runApp('Programas/ESCLAVO')
runApp('Programas/ESCLAVO')
packageVersion("dada2")
as.character(packageVersion("dada2"))
runApp('Programas/ESCLAVO')
.libPaths()
find.package("dada2")
runApp('Programas/ESCLAVO')
dev.off()
library(OmicCircos)
library(RColorBrewer)
library(varhandle)
getwd()
handle<-read.table("Programas/GGisy/test.tsv",stringsAsFactors = F,check.names = F)
handle
query
qryUniq<-unique(sort(handle$V1))
refUniq<-unique(sort(handle$V2))
qryUniq
fhand<-handle[handle$V6<handle$V7,]
rhand<-handle[handle$V6>handle$V7,]
linkf<-data.frame(seg1=fhand$V1, start1=fhand$V4, end1=fhand$V5, seg2=fhand$V2, start2=fhand$V6, end2=fhand$V7)
linkr<-data.frame(seg1=rhand$V1, start1=rhand$V4, end1=rhand$V5, seg2=rhand$V2, start2=rhand$V6, end2=rhand$V7)
#fix reverse positions
for(i in 1:nrow(linkr)){
contign<-unfactor(linkr[i,4])
contigl<-ref[contign,3]
linkr[i,5]<- contigl-linkr[i,5]+1
linkr[i,6]<- contigl-linkr[i,6]+1
}
linkr
linkf
linkr
linkf
linkr
i
contign<-unfactor(linkr[i,4])
linkr
linkr[i,4]
linkf<-data.frame(seg1=fhand$V1, start1=fhand$V4, end1=fhand$V5, seg2=fhand$V2, start2=fhand$V6, end2=fhand$V7, stringsAsFactors = F)
linkr<-data.frame(seg1=rhand$V1, start1=rhand$V4, end1=rhand$V5, seg2=rhand$V2, start2=rhand$V6, end2=rhand$V7, stringsAsFactors = F)
linkf<-data.frame(seg1=fhand$V1, start1=fhand$V4, end1=fhand$V5, seg2=fhand$V2, start2=fhand$V6, end2=fhand$V7, stringsAsFactors = F)
linkr<-data.frame(seg1=rhand$V1, start1=rhand$V4, end1=rhand$V5, seg2=rhand$V2, start2=rhand$V6, end2=rhand$V7, stringsAsFactors = F)
#fix reverse positions
for(i in 1:nrow(linkr)){
contign<-linkr[i,4]
contigl<-ref[contign,3]
linkr[i,5]<- contigl-linkr[i,5]+1
linkr[i,6]<- contigl-linkr[i,6]+1
}
setwd("~/Programas/ESCLAVO")
runApp()
read.table("2-taxInsight/tax_table.tsv",sep = "\t",header = T,stringsAsFactors = F)
tax<-read.table("projects/2-taxInsight/tax_table.tsv",sep = "\t",header = T,stringsAsFactors = F)
otu<-read.table("projects/2-taxInsight/otu_table.tsv",sep = "\t",header = T,stringsAsFactors = F)
tax
otu
ps<-phyloseq(otu_table(otu, taxa_are_rows=FALSE), tax_table(tax))
otu_table(otu, taxa_are_rows=FALSE)
tax_table(tax)
ps<-phyloseq(otu_table(otu, taxa_are_rows=FALSE), tax_table(as.matrix(tax)))
ps
tax_table(as.matrix(tax))
runApp()
