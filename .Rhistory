x[is.na(x)]<-0
y <- sqrt(r1sq - x^2)
y[is.na(y)]<-0
p3 <- which.max(y)
p3
y
which.max(D)
p3 <- which.max(y)
x3 <- x[p3]
y3 <- y[p3]
plus <- abs(D[p3,]^2 - (x3 - x)^2 - (y3 - y)^2)
D
D[p3,]
D[p3,]^2
D[p3,]^2 - (x3 - x)^2
x3
(x3 - x)^2
(x3 - x)
x
x3
maxDist
p1
x
x3 - x
x
D[p3,]^2
x
x - x3
(x3 - x)^2
x3
x
x - 10
x - 0.5
0.5 - x
x3
x3[1]
(x3[1] - x)
(x3[1] - x[1,])
x3
x3 - x
0.5 - x
x3[1,1]
(x3[1,1] - x[1,]
)
(x3[1,1] - x)
plus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] - y)^2)
minus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] + y)^2)
y[minus < plus] <- -y[minus < plus]
coords <- data.frame(x = x, y = y)
coords
distance2coordinates(dmatrix)
distance2coordinates <- function(D) {
n <- nrow(D)
maxDist <- max(D)
p1 <- ((maxDist - 1) %% n) + 1
p2 <- ((maxDist - 1) %/% n) + 1
x2 <- D[p1, p2]
r1sq <- D[p1,]^2
r2sq <- D[p2,]^2
x <- (r1sq - r2sq + x2^2)/(2*x2)
x[is.na(x)]<-0
y <- sqrt(r1sq - x^2)
y[is.na(y)]<-0
p3 <- which.max(y)
x3 <- x[p3]
y3 <- y[p3]
plus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] - y)^2)
minus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] + y)^2)
y[minus < plus] <- -y[minus < plus]
coords <- data.frame(x = x, y = y)
return(coords)
}
distance2coordinates(dmatrix)
coords
x
y
coords <- data.frame(x = x, y = y)
coords
coords <- data.frame(xcoord = x, ycoord = y)
coords
coords <- data.frame(xcoord = x, ycoord = y,stringsAsFactors = F,check.names = F)
coords
x
class(x)
x$`6307`
as.array(x)
as.vector(x)
coords <- data.frame(xcoord = as.vector(x), ycoord = as.vector(y),
stringsAsFactors = F,check.names = F)
coords
t(x)
coords <- data.frame(xcoord = t(x), ycoord = t(y),stringsAsFactors = F,check.names = F)
coords
distance2coordinates <- function(D) {
n <- nrow(D)
maxDist <- max(D)
p1 <- ((maxDist - 1) %% n) + 1
p2 <- ((maxDist - 1) %/% n) + 1
x2 <- D[p1, p2]
r1sq <- D[p1,]^2
r2sq <- D[p2,]^2
x <- (r1sq - r2sq + x2^2)/(2*x2)
x[is.na(x)]<-0
y <- sqrt(r1sq - x^2)
y[is.na(y)]<-0
p3 <- which.max(y)
x3 <- x[p3]
y3 <- y[p3]
plus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] - y)^2)
minus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] + y)^2)
y[minus < plus] <- -y[minus < plus]
coords <- data.frame(xcoord = t(x), ycoord = t(y),stringsAsFactors = F,check.names = F)
colnames(coords)<-c("xcoord","ycoord")
return(coords)
}
distance2coordinates(dmatrix)
distance2coordinates <- function(D) {
n <- nrow(D)
maxDist <- max(D)
p1 <- ((maxDist - 1) %% n) + 1
p2 <- ((maxDist - 1) %/% n) + 1
x2 <- D[p1, p2]
r1sq <- D[p1,]^2
r2sq <- D[p2,]^2
x <- (r1sq - r2sq + x2^2)/(2*x2)
x[is.na(x)]<-0
y <- sqrt(r1sq - x^2)
y[is.na(y)]<-0
p3 <- which.max(y)
x3 <- x[p3]
y3 <- y[p3]
plus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] - y)^2)
minus <- abs(D[p3,]^2 - (x3[1,1] - x)^2 - (y3[1,1] + y)^2)
y[minus < plus] <- -y[minus < plus]
coords <- data.frame(x = t(x), y = t(y),stringsAsFactors = F,check.names = F)
colnames(coords)<-c("x","y")
return(coords)
}
distance2coordinates(dmatrix)
coords<-distance2coordinates(dmatrix)
net<-network(testl,directed = F,... = gplot.layout.mds(coords, layout.par=list(var="user",dist="none",vm=dmatrix)))
net
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,
size = 2,node.alpha = 0.8, color = "phono",label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",dist="none",vm=coords),
size = 2,node.alpha = 0.8, color = "phono",label = T)
net
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(coords,mode = "mds", layout.par = list(var="user",dist="none",vm=dmatrix)
size = 2,node.alpha = 0.8, color = "phono",label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(coords,
size = 2,node.alpha = 0.8, color = "phono",label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(coords,mode = "mds", layout.par = list(var="user",dist="none",vm=dmatrix),
size = 2,node.alpha = 0.8, color = "phono",label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(coords,mode = "kamadakawai", layout.par = list(seed.coord=coords),
size = 2,node.alpha = 0.8, color = "phono",label = T)
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(seed.coord=coords),
size = 2,node.alpha = 0.8, color = "phono",label = T)
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(seed.coord=coords),
size = 2,node.alpha = 0.8, color = "phono",label = T)
coords
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=dmatrix,seed.coord=coords),
size = 2,node.alpha = 0.8, color = "phono",label = T)
dmatrix
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=dmatrix,seed.coord=coords),
size = 2,node.alpha = 0.8, color = "phono",label = T)
as.matrix(dmatrix)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=as.matrix(dmatrix),seed.coord=coords),
size = 2,node.alpha = 0.8, color = "phono",label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=as.matrix(dmatrix)),
size = 2,node.alpha = 0.8, color = "phono",label = T)
letters[1:11]
dmatrix<-replicate(length(unique(c(testl$source,testl$target))), (rnorm(length(unique(c(testl$source,testl$target))))^2)+1)
dmatrix<-as.data.frame(dmatrix)
colnames(dmatrix)<-letters[1:11]
rownames(dmatrix)<-letters[1:11]
for(i in 1:nrow(dmatrix)){
for(j in 1:ncol(dmatrix)){
if(i==j){
dmatrix[i,j]<-0
}
dmatrix[j,i]=dmatrix[i,j]
}
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=as.matrix(dmatrix)),
size = 2,node.alpha = 0.8, color = "phono",label = T)
dmatrix
testl
dict
dict<-data.frame(source=unique(c(testl$source,testl$target)), letter[1:unique(c(testl$source,testl$target))])
letter
dict<-data.frame(source=unique(c(testl$source,testl$target)), letters[1:unique(c(testl$source,testl$target))])
dict<-data.frame(source=unique(c(testl$source,testl$target)), letters[1:length(unique(c(testl$source,testl$target)))])
dict
dict<-data.frame(source=unique(c(testl$source,testl$target)), grouo=letters[1:length(unique(c(testl$source,testl$target)))])
dict<-data.frame(source=unique(c(testl$source,testl$target)), group=letters[1:length(unique(c(testl$source,testl$target)))])
dict
dict<-data.frame(row.names=unique(c(testl$source,testl$target)), group=letters[1:length(unique(c(testl$source,testl$target)))])
dict
testl
dict[testl$source,]
dict<-data.frame(row.names=unique(c(testl$source,testl$target)),
group=letters[1:length(unique(c(testl$source,testl$target)))],
stringsAsFactors = F)
dict[testl$source,]
testl$source<-dict[testl$source,]
testl$target<-dict[testl$target,]
testl
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=as.matrix(dmatrix)),
size = 2,node.alpha = 0.8, color = "phono",label = T)
dmatrix
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=dmatrix),
size = 2,node.alpha = 0.8, color = "phono",label = T)
net
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(elen=dmatrix),
size = 2,node.alpha = 0.8, color = "phono",label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
dmatrix
class(dmatrix)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=as.matrix(dmatrix)), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=as.matrix(dmatrix)), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
for(i in 1:nrow(dmatrix)){
for(j in 1:ncol(dmatrix)){
if(i==j){
dmatrix[i,j]<-0
}
dmatrix[j,i]=dmatrix[i,j]<-i
}
dmatrix
for(i in 1:nrow(dmatrix)){
for(j in 1:ncol(dmatrix)){
if(i==j){
dmatrix[i,j]<-0
}
dmatrix[j,i]=dmatrix[i,j]<-i-1
}
dmatrix
for(i in 1:nrow(dmatrix)){
for(j in 1:ncol(dmatrix)){
if(i==j){
dmatrix[i,j]<-0
}else{
dmatrix[j,i]=dmatrix[i,j]<-i
}
dmatrix
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix, exp=10), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix, exp=1), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix, exp=1.5), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix, exp=2), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix, exp=2), size = 3, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix, exp=3), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(var="user",elen=dmatrix), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "kamadakawai", layout.par = list(var="user",elen=as.matrix(dmatrix)), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
testl<-linktest[1:10,c(1,2)]
dmatrix<-replicate(length(unique(c(testl$source,testl$target))), (rnorm(length(unique(c(testl$source,testl$target))))^2)+1)
dmatrix<-as.data.frame(dmatrix)
colnames(dmatrix)<-letters[1:11]
rownames(dmatrix)<-letters[1:11]
for(i in 1:nrow(dmatrix)){
for(j in 1:ncol(dmatrix)){
if(i==j){
dmatrix[i,j]<-0
}else{
dmatrix[j,i]=dmatrix[i,j]<-i
}
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
dmatrix
dmatrix<-replicate(length(unique(c(testl$source,testl$target))), (rnorm(length(unique(c(testl$source,testl$target))))^2)+1)
dmatrix<-as.data.frame(dmatrix)
colnames(dmatrix)<-unique(c(testl$source,testl$target))
rownames(dmatrix)<-unique(c(testl$source,testl$target))
for(i in 1:nrow(dmatrix)){
for(j in 1:ncol(dmatrix)){
if(i==j){
dmatrix[i,j]<-0
}else{
dmatrix[j,i]=dmatrix[i,j]<-i
}
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
dmatrix
testl
class(testl$source)
colnames(dmatrix)
dmatrix
testl
net <- network(testl, directed = FALSE)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
dmatrix
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(vm=dmatrix), size = 2, label = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
testl
net <- network(testl, directed = T)
#network.vertex.names(net) = colnames(dmatrix)
#net %v% "phono" = ifelse(letters[1:15] %in% c("a", "e", "i"), "vowel", "consonant")
ggnet2(net,mode = "mds", layout.par = list(var="user",vm=dmatrix), size = 2, label = T)
testl
install.packages("shinydashboardPlus")
library(shinydashboardPlus)
shinyApp(
ui = dashboardPagePlus(
header = dashboardHeaderPlus(
enable_rightsidebar = TRUE,
rightSidebarIcon = "gears"
),
sidebar = dashboardSidebar(),
body = dashboardBody(),
rightsidebar = rightSidebar(
background = "dark",
rightSidebarTabContent(
id = 1,
title = "Tab 1",
icon = "desktop",
active = TRUE,
sliderInput(
"obs",
"Number of observations:",
min = 0, max = 1000, value = 500
)
),
rightSidebarTabContent(
id = 2,
title = "Tab 2",
textInput("caption", "Caption", "Data Summary")
),
rightSidebarTabContent(
id = 3,
icon = "paint-brush",
title = "Tab 3",
numericInput("obs", "Observations:", 10, min = 1, max = 100)
)
),
title = "Right Sidebar"
),
server = function(input, output) { }
)
library(shiny)
shinyApp(
ui = dashboardPagePlus(
header = dashboardHeaderPlus(
enable_rightsidebar = TRUE,
rightSidebarIcon = "gears"
),
sidebar = dashboardSidebar(),
body = dashboardBody(),
rightsidebar = rightSidebar(
background = "dark",
rightSidebarTabContent(
id = 1,
title = "Tab 1",
icon = "desktop",
active = TRUE,
sliderInput(
"obs",
"Number of observations:",
min = 0, max = 1000, value = 500
)
),
rightSidebarTabContent(
id = 2,
title = "Tab 2",
textInput("caption", "Caption", "Data Summary")
),
rightSidebarTabContent(
id = 3,
icon = "paint-brush",
title = "Tab 3",
numericInput("obs", "Observations:", 10, min = 1, max = 100)
)
),
title = "Right Sidebar"
),
server = function(input, output) { }
)
library(shinydashboard)
library(shinydashboardPlus)
shinyApp(
ui = dashboardPagePlus(
header = dashboardHeaderPlus(
enable_rightsidebar = TRUE,
rightSidebarIcon = "gears"
),
sidebar = dashboardSidebar(),
body = dashboardBody(),
rightsidebar = rightSidebar(
background = "dark",
rightSidebarTabContent(
id = 1,
title = "Tab 1",
icon = "desktop",
active = TRUE,
sliderInput(
"obs",
"Number of observations:",
min = 0, max = 1000, value = 500
)
),
rightSidebarTabContent(
id = 2,
title = "Tab 2",
textInput("caption", "Caption", "Data Summary")
),
rightSidebarTabContent(
id = 3,
icon = "paint-brush",
title = "Tab 3",
numericInput("obs", "Observations:", 10, min = 1, max = 100)
)
),
title = "Right Sidebar"
),
server = function(input, output) { }
)
runApp('~/Programas/ESCLAVO')
install.packages("shinyWidgets")
library(shinyWidgets)
runApp('~/Programas/ESCLAVO')
icon
runApp('~/Programas/ESCLAVO')
setwd("~/Programas/ESCLAVO")
runApp()
setwd("~/Programas/ESCLAVO")
runApp()
pwd
runApp()
